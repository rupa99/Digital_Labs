// Copyright (C) 1991-2015 Altera Corporation. All rights reserved.
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, the Altera Quartus Prime License Agreement,
// the Altera MegaCore Function License Agreement, or other 
// applicable license agreement, including, without limitation, 
// that your use is for the sole purpose of programming logic 
// devices manufactured by Altera and sold by Altera or its 
// authorized distributors.  Please refer to the applicable 
// agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "02/13/2019 22:11:23"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          LogicalStep_Lab2_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module LogicalStep_Lab2_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clkin_50;
reg [3:0] pb;
reg [7:0] sw;
// wires                                               
wire [7:0] leds;
wire seg7_char1;
wire seg7_char2;
wire [6:0] seg7_data;

// assign statements (if any)                          
LogicalStep_Lab2_top i1 (
// port map - connection between master ports and signals/registers   
	.clkin_50(clkin_50),
	.leds(leds),
	.pb(pb),
	.seg7_char1(seg7_char1),
	.seg7_char2(seg7_char2),
	.seg7_data(seg7_data),
	.sw(sw)
);
initial 
begin 
#1000000 $finish;
end 

// sw[0]
initial
begin
	repeat(2)
	begin
		sw[0] = 1'b0;
		sw[0] = #240000 1'b1;
		# 240000;
	end
	sw[0] = 1'b0;
end 

// sw[1]
initial
begin
	repeat(4)
	begin
		sw[1] = 1'b0;
		sw[1] = #120000 1'b1;
		# 120000;
	end
	sw[1] = 1'b0;
end 

// sw[2]
initial
begin
	repeat(8)
	begin
		sw[2] = 1'b0;
		sw[2] = #60000 1'b1;
		# 60000;
	end
	sw[2] = 1'b0;
end 

// sw[3]
initial
begin
	repeat(16)
	begin
		sw[3] = 1'b0;
		sw[3] = #30000 1'b1;
		# 30000;
	end
	sw[3] = 1'b0;
	sw[3] = #30000 1'b1;
end 

// sw[4]
initial
begin
	sw[4] = 1'b0;
	sw[4] = #400000 1'b1;
	sw[4] = #400000 1'b0;
end 

// sw[5]
initial
begin
	repeat(2)
	begin
		sw[5] = 1'b0;
		sw[5] = #200000 1'b1;
		# 200000;
	end
	sw[5] = 1'b0;
end 

// sw[6]
always
begin
	sw[6] = 1'b0;
	sw[6] = #100000 1'b1;
	#100000;
end 

// sw[7]
always
begin
	sw[7] = 1'b0;
	sw[7] = #50000 1'b1;
	#50000;
end 

// pb[0]
initial
begin
	pb[0] = 1'b1;
	pb[0] = #970000 1'b0;
end 

// pb[1]
initial
begin
	pb[1] = 1'b1;
	pb[1] = #610000 1'b0;
end 

// pb[2]
initial
begin
	pb[2] = 1'b1;
	pb[2] = #240000 1'b0;
	pb[2] = #370000 1'b1;
	pb[2] = #360000 1'b0;
end 

// pb[3]
initial
begin
	pb[3] = 1'b0;
	pb[3] = #240000 1'b1;
	pb[3] = #730000 1'b0;
end 
endmodule

